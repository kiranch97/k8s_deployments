#!/bin/bash

# Update the apt package index and install packages needed to use the Kubernetes apt repository
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl


# Add the Kubernetes apt repository
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Download the Kubernetes public signing key
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg


# Add CRI-O apt repository
curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
	
echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /" | tee /etc/apt/sources.list.d/cri-o.list

# Update apt package index with the new repository
apt-get update
apt-get install -y cri-o kubelet kubeadm kubectl

# Start and enable CRI-O
sudo systemctl daemon-reload
sudo systemctl enable crio --now


# Install specific version of kubectl, kubelet, and kubeadm
#sudo apt-get install -y kubectl=1.27.3-00 kubelet=1.27.3-00 kubeadm=1.27.3-00

# Pin their version
sudo apt-mark hold kubectl kubelet kubeadm

# Configure IPv4 forwarding and iptables
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter

# Configure sysctl params
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload sysctl
sudo sysctl --system




# Disable swap
sudo sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
sudo swapoff -a

# Initialize the cluster
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket=/var/run/crio/crio.sock

# Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Install Calico CNI
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

# Wait for Calico pods to be ready
echo "Waiting for Calico pods to be ready..."
kubectl wait --for=condition=ready pod -l k8s-app=calico-node --timeout=300s -n kube-system

# Restart CoreDNS
echo "Restarting CoreDNS..."
kubectl -n kube-system rollout restart deployment coredns

# Wait for CoreDNS pods to be ready
echo "Waiting for CoreDNS pods to be ready..."
kubectl wait --for=condition=ready pod -l k8s-app=kube-dns --timeout=300s -n kube-system

# Verify CoreDNS is running
echo "Verifying CoreDNS status:"
kubectl get pods -n kube-system -l k8s-app=kube-dns

# Check CoreDNS logs
echo "Checking CoreDNS logs:"
kubectl logs -n kube-system -l k8s-app=kube-dns

# Get the worker nodes join command
kubeadm token create --print-join-command

# Final cluster status
echo "Final cluster status:"
kubectl get nodes
kubectl get pods --all-namespaces
